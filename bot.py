import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['show_comments'] = False  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è

    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data='choose_group')],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∑–∞—á—ë—Ç–∫–µ", callback_data='enter_record')],
        [InlineKeyboardButton("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –ù–ï–¢", callback_data='toggle_comments')]
    ]
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=InlineKeyboardMarkup(keyboard))


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'toggle_comments':
        current = context.user_data.get('show_comments', False)
        context.user_data['show_comments'] = not current
        new_text = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –î–ê" if not current else "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –ù–ï–¢"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data='choose_group')],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∑–∞—á—ë—Ç–∫–µ", callback_data='enter_record')],
            [InlineKeyboardButton(new_text, callback_data='toggle_comments')]
        ])
        try:
            await query.edit_message_reply_markup(reply_markup=keyboard)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", e)

    elif query.data == 'choose_group':
        try:
            with open("data.json", "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception as e:
            await query.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        groups = sorted(set(student["–≥—Ä—É–ø–ø–∞"] for student in data))
        buttons = [InlineKeyboardButton(group, callback_data=f"group_{group}") for group in groups]
        keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')])
        sent_message = await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data['last_group_list_message_id'] = sent_message.message_id

    elif query.data.startswith('group_'):
        group = query.data.replace('group_', '')
        try:
            with open("data.json", "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception as e:
            await query.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
            return

        students = [s for s in data if s["–≥—Ä—É–ø–ø–∞"] == group]
        if not students:
            await query.message.reply_text("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        show_comments = context.user_data.get('show_comments', False)
        message_text = f"–°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã {group}:\n\n"
        for student in students:
            comment = f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {student['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']}" if show_comments else ""
            message_text += (
                f"–ó–∞—á—ë—Ç–∫–∞: {student['–Ω–æ–º–µ—Ä_–∑–∞—á—ë—Ç–∫–∏']}\n"
                f"–û—Ü–µ–Ω–∫–∞: {student['–æ—Ü–µ–Ω–∫–∞']}"
                f"{comment}\n"
                f"{'-' * 20}\n"
            )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_message')]
        ])
        sent_message = await query.message.reply_text(message_text, reply_markup=keyboard)
        context.user_data['last_group_message_id'] = sent_message.message_id

    elif query.data == 'enter_record':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—á—ë—Ç–∫–∏:")

    elif query.data == 'back_message':
        last_message_id = context.user_data.pop('last_group_message_id', None)
        if last_message_id:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_message_id)
            except Exception as e:
                print("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:", e)

    elif query.data == 'back_to_menu':
        last_message_id = context.user_data.pop('last_group_list_message_id', None)
        if last_message_id:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_message_id)
            except Exception as e:
                print("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:", e)


async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    record_id = update.message.text.strip()
    try:
        with open("data.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return

    show_comments = context.user_data.get('show_comments', False)
    student = next((item for item in data if item["–Ω–æ–º–µ—Ä_–∑–∞—á—ë—Ç–∫–∏"] == record_id), None)
    if not student:
        await update.message.reply_text("–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–æ–π –∑–∞—á—ë—Ç–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    comment = f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {student['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']}" if show_comments else ""
    response = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:\n"
        f"–ì—Ä—É–ø–ø–∞: {student['–≥—Ä—É–ø–ø–∞']}\n"
        f"–û—Ü–µ–Ω–∫–∞: {student['–æ—Ü–µ–Ω–∫–∞']}"
        f"{comment}"
    )
    await update.message.reply_text(response)


async def run_bot():
    from settings import TOKEN
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()